openapi: 3.0.0
servers:
  - url: 'https://api.deepgram.com/v1'
info:
  version: 1.0.0
  title: Deepgram API
  license:
    name: Apache-2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /projects:
    get:
      operationId: getProjects
      description: 'Retrieves basic information about the specified project.'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
  /projects/{project_id}:
    get:
      operationId: getProject
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    patch:
      operationId: updateProject
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /projects/{project_id}/keys:
    post:
      operationId: createKey
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyCreate'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyCreated'
    get:
      operationId: getKeys
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      description: 'Retrieves keys for the specified project. If the authenticated account has access to the members:read, admins:read, and owners:read project scopes, it will list all keys for the project. Otherwise, it will only list keys that belong to the authenticated account.'
      responses:
        '200':
          description: 'Keys found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Keys'
  /projects/{project_id}/keys/{key_id}:
    delete:
      operationId: deleteKey
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: key_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
    get:
      operationId: getKey
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: key_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
  /projects/{project_id}/members:
    get:
      operationId: getMembers
      parameters:
        - name: project_id
          description: 'Identifier of the project for which you want to get members.'
          in: path
          required: true
          schema:
            type: string
      description: 'Retrieves account objects for all of the accounts in the specified project. Required account scope(s): project:read. Required project scope(s): project:read, members:read, admins:read, owners:read.'
      responses:
        '200':
          description: 'Members found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Members'
  /projects/{project_id}/members/{member_id}:
    delete:
      operationId: removeMember
      description: 'Removes the specified account from the specified project. API keys created by this member for the specified project will also be deleted.'
      parameters:
        - name: project_id
          description: 'Identifier of the project that contains the account you want to remove.'
          in: path
          required: true
          schema:
            type: string
        - name: member_id
          description: 'Identifier of the account that you want to remove.'
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Account removed.'
  /projects/{project_id}/members/{member_id}/scopes:
    get:
      operationId: getMemberScopes
      parameters:
        - name: project_id
          description: 'Identifier of the project that contains the member for whom you want to get scopes.'
          in: path
          required: true
          schema:
            type: string
        - name: member_id
          description: 'Identifier of the member for whom you want to get scopes.'
          in: path
          required: true
          schema:
            type: string
      description: 'Retrieves account objects for all of the accounts in the specified project. Required account scope(s): project:read. Required project scope(s): project:read, members:read, admins:read, owners:read.'
      responses:
        '200':
          description: 'Scopes found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scopes'
    put:
      operationId: updateScope
      parameters:
        - name: project_id
          description: 'Identifier of the project that contains the specified member and scope that you want to update.'
          in: path
          required: true
          schema:
            type: string
        - name: member_id
          description: 'Identifier of the project that contains the specified member and scope that you want to update.'
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scope'
      responses:
        '200':
          description: 'Scope updated.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /projects/{project_id}/requests:
    get:
      operationId: getAllRequests
      parameters:
        - name: project_id
          description: 'Identifier of the project for which you want to retrieve requests.'
          in: path
          required: true
          schema:
            type: string
        - name: start
          description: 'Start date of the requested date range. Format is YYYY-MM-DD. Defaults to the time of your first request. If no time zone is specified, defaults to Coordinated Universal Time (UTC).'
          in: query
          required: false
          schema:
            type: string
        - name: end
          description: 'End date of the requested date range. Format is YYYY-MM-DD. Defaults to the current time. If no time zone is specified, defaults to Coordinated Universal Time (UTC).'
          in: query
          required: false
          schema:
            type: string
        - name: page
          description: 'Page number to return from within the list of requests. Default: 0'
          in: query
          required: false
          schema:
            type: integer
        - name: limit
          description: 'Number of results to return per page. Default: 10'
          in: query
          required: false
          schema:
            type: integer
        - name: status
          description: 'Status of requests to return. Enables you to filter requests depending on whether they have succeeded or failed. If not specified, returns requests with all statuses.'
          in: query
          required: false
          schema:
            type: string
            enum:
              - succeeded
              - failed
      responses:
        '200':
          description: 'Requests found. Requests will be returned in descending order based on creation time (newest first).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestsPagedResponse'
  /projects/{project_id}/requests/{request_id}:
    get:
      operationId: getRequest
      parameters:
        - name: project_id
          description: 'Identifier of the project for which you want to retrieve the specified request.'
          in: path
          required: true
          schema:
            type: string
        - name: request_id
          description: 'Identifier of the request that you want to retrieve.'
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Request found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
  /projects/{project_id}/usage:
    get:
      operationId: getUsageSummary
      parameters:
        - name: project_id
          description: 'Identifier of the project for which you want to summarize usage.'
          in: path
          required: true
          schema:
            type: string
        - name: start
          description: ''
          in: query
          required: false
          schema:
            type: string
        - name: end
          description: ''
          in: query
          required: false
          schema:
            type: string
        - name: accessor
          description: ''
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: tag
          description: ''
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: method
          description: ''
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: model
          description: ''
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: multichannel
          description: ''
          in: query
          required: false
          schema:
            type: boolean
        - name: interim_results
          description: ''
          in: query
          required: false
          schema:
            type: boolean
        - name: punctuate
          description: ''
          in: query
          required: false
          schema:
            type: boolean
        - name: replace
          description: ''
          in: query
          required: false
          schema:
            type: boolean
        - name: profanity_filter
          description: ''
          in: query
          required: false
          schema:
            type: boolean
        - name: keywords
          description: ''
          in: query
          required: false
          schema:
            type: boolean
        - name: sentiment
          description: ''
          in: query
          required: false
          schema:
            type: boolean
        - name: diarize
          description: ''
          in: query
          required: false
          schema:
            type: boolean
        - name: detect_language
          description: ''
          in: query
          required: false
          schema:
            type: boolean
        - name: search
          description: ''
          in: query
          required: false
          schema:
            type: boolean
        - name: redact
          description: ''
          in: query
          required: false
          schema:
            type: boolean
        - name: alternatives
          description: ''
          in: query
          required: false
          schema:
            type: boolean
        - name: numerals
          description: ''
          in: query
          required: false
          schema:
            type: boolean

      responses:
        '200':
          description: 'Usage statistics found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageSummary'
security:
  - ApiKeyAuth: []
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    Key:
      title: API Key
      properties:
        api_key_id:
          type: string
          description: 'Identifier of the API Key.'
        comment:
          type: string
          description: 'Comments associated with the API Key.'
        created:
          type: string
          description: 'Date and time when the API Key was created.'
        scopes:
          type: array
          description: 'Scopes associated with the API Key.'
          items:
            type: string
    KeyCreate:
      properties:
        comment:
          type: string
        scopes:
          type: array
          items:
            type: string
    KeyCreated:
      properties:
        key:
          type: string
          description: 'Value of the API Key. This is the only chance to read the Key value; it cannot be recovered later.'
        api_key_id:
          type: string
          description: 'Identifier of the API Key.'
        comment:
          type: string
          description: 'Comments associated with the API Key.'
        created:
          type: string
          description: 'Date and time when the API Key was created.'
        scopes:
          type: array
          description: 'Scopes associated with the API Key.'
          items:
            type: string
    Keys:
      title: Keys
      properties:
        api_keys:
          type: array
          items:
            $ref: '#/components/schemas/MemberKeyPair'
    Member:
      title: Member
      properties:
        member_id:
          type: string
        email:
          type: string
    MemberComplete:
      title: Member
      required: ["member_id", "scopes", "email"]
      properties:
        member_id:
          type: string
          description: 'Identifier of member.'
        first_name:
          type: string
          description: 'First name of member. Optional.'
        last_name:
          type: string
          description: 'Last name of member. Optional.'
        scopes:
          type: array
          description: 'Project scopes associated with member.'
          items:
            type: string
        email:
          type: string
          description: 'Email address of member.'
    MemberKeyPair:
      title: Member and Key
      properties:
        member:
          $ref: '#/components/schemas/Member'
        api_key:
          $ref: '#/components/schemas/Key'
    Members:
      title: Members
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/MemberComplete'
    Projects:
      title: Projects
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    Project:
      title: Project
      properties:
        name:
          type: string
          description: 'Name of project'
        company:
          type: string
          description: 'Name of company'
        project_id:
          type: string
    ProjectUpdate:
      title: Project update
      properties:
        name:
          type: string
          description: 'Name of project'
        company:
          type: string
          description: 'Name of company'
    MessageResponse:
      title: Response message
      properties:
        message:
          type: string
    Callback:
      title: API callback
      properties:
        code:
          description: 'HTTP status code returned by the callback.'
          type: integer
        completed:
          description: 'Date/time when callback was completed.'
          type: string
    Request:
      title: API Request
      properties:
        request_id:
          type: string
        created:
          type: string
        path:
          type: string
        api_key_id:
          type: string
        response:
          $ref: '#/components/schemas/Response'
        callback:
          $ref: '#/components/schemas/Callback'
    Response:
      title: API Response
      properties:
        details:
          $ref: '#/components/schemas/ResponseDetails'
        code:
          description: 'HTTP status code returned by the request.'
          type: integer
        completed:
          description: 'Date/time when request was completed.'
          type: string
    ResponseDetails:
      title: Details of API Response
      properties:
        usd:
          type: number
        duration:
          type: number
        total_audio:
          type: number
        channels:
          type: integer
        streams:
          type: integer
        model:
          type: string
        methods:
          type: string
        tags:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string
        config:
          type: object
          properties:
            diarize:
              type: boolean
            multichannel:
              type: boolean
    RequestsPagedResponse:
      title: Paginated list of Requests
      properties:
        limit:
          type: integer
          description: 'Number of results to return per page. Used for pagination.'
        page:
          type: integer
          description: 'Page number that should be returned. Used for pagination.'
        requests:
          type: array
          items:
            $ref: '#/components/schemas/Request'
    Scope:
      title: Scope
      properties:
        scope:
          type: string
          description: 'Scope for the specified member and project.'
    Scopes:
      title: Array of scopes
      properties:
        scopes:
          type: array
          items:
            type: string
    UsageSummary:
      title: Summary of usage
      properties:
        start:
          type: string
          description: 'Start date for included requests.'
        end:
          type: string
          description: 'End date for included requests.'
        resolution:
          type: object
          properties:
            units:
              type: string
              description: 'Units of resolution amount.'
            amount:
              type: integer
              description: 'Number of days'
        results:
          type: array
          items:
            $ref: '#/components/schemas/UsageResult'
    UsageResult:
      properties:
        start:
          type: string
          description: 'Start date of included requests.'
        end:
          type: string
          description: 'End date of included requests.'
        hours:
          type: number
          description: 'Length of time (in hours) of audio processed in included requests.'
        requests:
          type: integer
          description: 'Number of included requests.'
